DELETE FROM public.sonarqube_integration_tested_repo
WHERE name IN ('name1', 'name2', 'name3');


---------------------------------
ALTER TABLE public.sonarqube_integration_tested_repo
ADD COLUMN central_id integer;


CREATE TEMP TABLE temp_central_id_data (
    name VARCHAR(255),
    central_id INTEGER
);

COPY temp_central_id_data(name, central_id)
FROM '/path/to/your/file.csv' 
DELIMITER ',' 
CSV HEADER;



UPDATE public.sonarqube_integration_tested_repo s
SET central_id = t.central_id
FROM temp_central_id_data t
WHERE s.name = t.name;

SELECT name, central_id 
FROM public.sonarqube_integration_tested_repo
WHERE central_id IS NOT NULL;

DROP TABLE temp_central_id_data;



------------------------------------------


ALTER TABLE public.sonarqube_integration_tested_repo
ADD COLUMN has_buildblocks_yaml BOOLEAN;


CREATE TEMP TABLE temp_buildblocks_data (
    name VARCHAR(255),
    has_buildblocks_yaml BOOLEAN
);


UPDATE public.sonarqube_integration_tested_repo s
SET has_buildblocks_yaml = t.has_buildblocks_yaml
FROM temp_buildblocks_data t
WHERE s.name = t.name;


SELECT name, has_buildblocks_yaml 
FROM public.sonarqube_integration_tested_repo
WHERE has_buildblocks_yaml IS NOT NULL;

DROP TABLE temp_buildblocks_data;


-------------------------------------------


UPDATE public.sonarqube_integration_tested_repo s
SET central_id = g.central_id
FROM public.sonar_qube_integration_github_metadata g
WHERE s.name = g.name;


---------------------------------------------------

ALTER TABLE public.sonarqube_integration_tested_repo
ADD COLUMN manager_name TEXT,
ADD COLUMN manager_email TEXT,
ADD COLUMN manager_band INTEGER,
ADD COLUMN vp1_name TEXT,
ADD COLUMN vp1_email TEXT,
ADD COLUMN vp1_band INTEGER,
ADD COLUMN vp2_name TEXT,
ADD COLUMN vp2_email TEXT,
ADD COLUMN vp2_band INTEGER,
ADD COLUMN svp_name TEXT,
ADD COLUMN svp_email TEXT,
ADD COLUMN svp_band INTEGER;


UPDATE public.sonarqube_integration_tested_repo s
SET 
    manager_name = o.manager_name,
    manager_email = o.manager_email,
    manager_band = o.manager_band,
    vp1_name = o.vp1_name,
    vp1_email = o.vp1_email,
    vp1_band = o.vp1_band,
    vp2_name = o.vp2_name,
    vp2_email = o.vp2_email,
    vp2_band = o.vp2_band,
    svp_name = o.svp_name,
    svp_email = o.svp_email,
    svp_band = o.svp_band
FROM public.sonarqube_integration_carid_app_owners o
WHERE s.central_id = o.car_id;


SELECT name, central_id, manager_name, manager_email, manager_band, 
       vp1_name, vp1_email, vp1_band, 
       vp2_name, vp2_email, vp2_band, 
       svp_name, svp_email, svp_band
FROM public.sonarqube_integration_tested_repo
WHERE manager_name IS NOT NULL;


-------------------------------------------------------

SELECT COUNT(DISTINCT t.name) AS matching_names_count
FROM public.sonarqube_integration_tested_repo t
JOIN public.sonarqube_integration_baseline_poa b
ON t.name = b.repo_name;


Step 1: Query to Fetch Matching Rows
SELECT b.*
FROM public.sonarqube_integration_baseline_poa b
JOIN public.sonarqube_integration_tested_repo t
ON b.repo_name = t.name;


Step 2: Delete Matching Rows
DELETE FROM public.sonarqube_integration_baseline_poa b
USING public.sonarqube_integration_tested_repo t
WHERE b.repo_name = t.name;

Step 3: Verify Deletion (Optional)
SELECT *
FROM public.sonarqube_integration_baseline_poa b
JOIN public.sonarqube_integration_tested_repo t
ON b.repo_name = t.name;


-------------------------------------------------------

SELECT *
FROM public.sonarqube_integration_tested_repo t
WHERE 
    t.has_buildblocks_yaml = true
    AND t.archived = false
    AND t.name NOT IN (
        SELECT b.repo_name 
        FROM public.sonarqube_integration_baseline_poa b
    )
ORDER BY t.pushed_at DESC;


SELECT t.name, t.has_buildblocks_yaml, t.archived, t.pushed_at
FROM public.sonarqube_integration_tested_repo t
WHERE 
    t.has_buildblocks_yaml = true
    AND t.archived = false
    AND t.name NOT IN (
        SELECT b.repo_name 
        FROM public.sonarqube_integration_baseline_poa b
    )
ORDER BY t.pushed_at DESC;
-------------
