DELETE FROM public.sonarqube_integration_tested_repo
WHERE name IN ('name1', 'name2', 'name3');


---------------------------------
ALTER TABLE public.sonarqube_integration_tested_repo
ADD COLUMN central_id integer;


CREATE TEMP TABLE temp_central_id_data (
    name VARCHAR(255),
    central_id INTEGER
);

COPY temp_central_id_data(name, central_id)
FROM '/path/to/your/file.csv' 
DELIMITER ',' 
CSV HEADER;



UPDATE public.sonarqube_integration_tested_repo s
SET central_id = t.central_id
FROM temp_central_id_data t
WHERE s.name = t.name;

SELECT name, central_id 
FROM public.sonarqube_integration_tested_repo
WHERE central_id IS NOT NULL;

DROP TABLE temp_central_id_data;



------------------------------------------


ALTER TABLE public.sonarqube_integration_tested_repo
ADD COLUMN has_buildblocks_yaml BOOLEAN;


CREATE TEMP TABLE temp_buildblocks_data (
    name VARCHAR(255),
    has_buildblocks_yaml BOOLEAN
);


UPDATE public.sonarqube_integration_tested_repo s
SET has_buildblocks_yaml = t.has_buildblocks_yaml
FROM temp_buildblocks_data t
WHERE s.name = t.name;


SELECT name, has_buildblocks_yaml 
FROM public.sonarqube_integration_tested_repo
WHERE has_buildblocks_yaml IS NOT NULL;

DROP TABLE temp_buildblocks_data;


-------------------------------------------


UPDATE public.sonarqube_integration_tested_repo s
SET central_id = g.central_id
FROM public.sonar_qube_integration_github_metadata g
WHERE s.name = g.name;


---------------------------------------------------

ALTER TABLE public.sonarqube_integration_tested_repo
ADD COLUMN manager_name TEXT,
ADD COLUMN manager_email TEXT,
ADD COLUMN manager_band INTEGER,
ADD COLUMN vp1_name TEXT,
ADD COLUMN vp1_email TEXT,
ADD COLUMN vp1_band INTEGER,
ADD COLUMN vp2_name TEXT,
ADD COLUMN vp2_email TEXT,
ADD COLUMN vp2_band INTEGER,
ADD COLUMN svp_name TEXT,
ADD COLUMN svp_email TEXT,
ADD COLUMN svp_band INTEGER;


UPDATE public.sonarqube_integration_tested_repo s
SET 
    manager_name = o.manager_name,
    manager_email = o.manager_email,
    manager_band = o.manager_band,
    vp1_name = o.vp1_name,
    vp1_email = o.vp1_email,
    vp1_band = o.vp1_band,
    vp2_name = o.vp2_name,
    vp2_email = o.vp2_email,
    vp2_band = o.vp2_band,
    svp_name = o.svp_name,
    svp_email = o.svp_email,
    svp_band = o.svp_band
FROM public.sonarqube_integration_carid_app_owners o
WHERE s.central_id = o.car_id;


SELECT name, central_id, manager_name, manager_email, manager_band, 
       vp1_name, vp1_email, vp1_band, 
       vp2_name, vp2_email, vp2_band, 
       svp_name, svp_email, svp_band
FROM public.sonarqube_integration_tested_repo
WHERE manager_name IS NOT NULL;


-------------------------------------------------------
SELECT DISTINCT t.name 
FROM public.sonarqube_integration_tested_repo t
WHERE t.name IN (
    SELECT b.repo_name FROM public.sonarqube_integration_baseline_poa b
);



SELECT COUNT(DISTINCT t.name) AS matching_names_count
FROM public.sonarqube_integration_tested_repo t
JOIN public.sonarqube_integration_baseline_poa b
ON t.name = b.repo_name;


Step 1: Query to Fetch Matching Rows
SELECT b.*
FROM public.sonarqube_integration_baseline_poa b
JOIN public.sonarqube_integration_tested_repo t
ON b.repo_name = t.name;


Step 2: Delete Matching Rows
DELETE FROM public.sonarqube_integration_baseline_poa b
USING public.sonarqube_integration_tested_repo t
WHERE b.repo_name = t.name;

Step 3: Verify Deletion (Optional)
SELECT *
FROM public.sonarqube_integration_baseline_poa b
JOIN public.sonarqube_integration_tested_repo t
ON b.repo_name = t.name;


-------------------------------------------------------

SELECT *
FROM public.sonarqube_integration_tested_repo t
WHERE 
    t.has_buildblocks_yaml = true
    AND t.archived = false
    AND t.name NOT IN (
        SELECT b.repo_name 
        FROM public.sonarqube_integration_baseline_poa b
    )
ORDER BY t.pushed_at DESC;


SELECT t.name, t.has_buildblocks_yaml, t.archived, t.pushed_at
FROM public.sonarqube_integration_tested_repo t
WHERE 
    t.has_buildblocks_yaml = true
    AND t.archived = false
    AND t.name NOT IN (
        SELECT b.repo_name 
        FROM public.sonarqube_integration_baseline_poa b
    )
ORDER BY t.pushed_at DESC;
-------------


check 

SELECT *
FROM public.sonarqube_integration_tested_repo t
WHERE 
    t.has_buildblocks_yaml = true
    AND t.archived = false
    AND t.name NOT IN (
        SELECT b.repo_name FROM public.sonarqube_integration_baseline_poa b
    )
ORDER BY t.pushed_at DESC;


SELECT *
FROM public.sonarqube_integration_tested_repo t
WHERE 
    t.has_buildblocks_yaml = true
    AND t.archived = false
ORDER BY t.pushed_at DESC;

SELECT t.*
FROM public.sonarqube_integration_tested_repo t
LEFT JOIN public.sonarqube_integration_baseline_poa b
ON t.name = b.repo_name
WHERE 
    t.has_buildblocks_yaml = true
    AND t.archived = false
    AND b.repo_name IS NULL
ORDER BY t.pushed_at DESC;


----------------------------------------------
testing 


SELECT t.*
FROM public.sonarqube_integration_tested_repo t
LEFT JOIN public.sonarqube_integration_baseline_poa b
ON t.name = b.repo_name
WHERE b.repo_name IS NULL;


SELECT COUNT(*) AS count_not_tested
FROM public.sonarqube_integration_tested_repo t
LEFT JOIN public.sonarqube_integration_baseline_poa b
ON t.name = b.repo_name
WHERE b.repo_name IS NULL;

Certainly! Here's how you can confirm the counts using SQL. We'll break it into three queries:

1. Query to Count the Total Number of Repos in tested_repo
sql
Copy code
SELECT COUNT(*) AS total_count
FROM public.sonarqube_integration_tested_repo;
This gives the total number of repos in the tested_repo table.
Expected Output (Based on Your Example):

diff
Copy code
total_count
-----------
10
2. Query to Count the Number of Repos Already Tested (Present in baseline_poa)
sql
Copy code
SELECT COUNT(DISTINCT t.name) AS tested_count
FROM public.sonarqube_integration_tested_repo t
JOIN public.sonarqube_integration_baseline_poa b
ON t.name = b.repo_name;
This counts how many repos in tested_repo are also present in baseline_poa.
Expected Output (Based on Your Example):

diff
Copy code
tested_count
------------
4
3. Query to Count the Number of Repos Yet to Be Tested (Not in baseline_poa)
sql
Copy code
SELECT COUNT(*) AS not_tested_count
FROM public.sonarqube_integration_tested_repo t
LEFT JOIN public.sonarqube_integration_baseline_poa b
ON t.name = b.repo_name
WHERE b.repo_name IS NULL;
This counts how many repos in tested_repo are not present in baseline_poa.
Expected Output (Based on Your Example):

markdown
Copy code
not_tested_count
----------------
6
Summary:
Total repos in tested_repo: 10
Already tested repos (present in baseline_poa): 4
Repos to be tested (not in baseline_poa): 6
These queries will confirm if the counts align with your expectations.
-------------------------------------------------------------

SQL Query to Get Complete Rows for the Repos Yet to Be Tested:
sql
Copy code
SELECT t.*
FROM public.sonarqube_integration_tested_repo t
LEFT JOIN public.sonarqube_integration_baseline_poa b
ON t.name = b.repo_name
WHERE b.repo_name IS NULL;
Explanation:
SELECT t.*: Retrieves all columns from the tested_repo table.
LEFT JOIN: Joins tested_repo with baseline_poa to find matching repos by name.
WHERE b.repo_name IS NULL: Filters the rows to only include those where name from tested_repo is not present in baseline_poa.
Optional: Verify the Count Again
If you also want to confirm the count of these rows, you can run:

sql
Copy code
SELECT COUNT(*) AS not_tested_count
FROM public.sonarqube_integration_tested_repo t
LEFT JOIN public.sonarqube_integration_baseline_poa b
ON t.name = b.repo_name
WHERE b.repo_name IS NULL;

============================

SELECT t.*
FROM public.sonarqube_integration_tested_repo t
LEFT JOIN public.sonarqube_integration_baseline_poa b
ON t.name = b.repo_name
WHERE 
    b.repo_name IS NULL  -- Not present in baseline_poa
    AND t.archived = false  -- Skip archived names
    AND t.has_buildblocks_yaml = true  -- Keep only where buildblock is true
    AND t.central_id IS NOT NULL  -- Remove where CAR ID is NULL
ORDER BY t.pushed_at DESC;  -- Optional: Sort by the latest push date
-------------------------------------------

SELECT t.*
FROM public.sonarqube_integration_tested_repo t
LEFT JOIN public.sonarqube_integration_baseline_poa b
ON t.name = b.repo_name
WHERE 
    b.repo_name IS NULL  -- Not present in baseline_poa
    AND t.archived = false  -- Skip archived names
    AND t.has_buildblocks_yaml = true  -- Keep only where buildblock is true
    AND t.central_id IS NOT NULL  -- Remove where CAR ID is NULL
    AND (
        t.svp_name = 'xyz'
        OR t.vp1_name = 'xyz'
        OR t.vp2_name = 'xyz'
    )  -- At least one of the SVP/VP names is 'xyz'
ORDER BY t.pushed_at DESC;  -- Optional: Sort by the latest push date


