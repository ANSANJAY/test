## SQL Query: Active Repositories on Github Grouped by VP1 

```sql
SELECT 
    o.vp1_name, 
    COUNT(DISTINCT g.name) AS active_repo_count
FROM 
    public.sonar_qube_integration_github_metadata_central_id g
JOIN 
    public.sonarqube_integration_carid_app_owners_updated o
    ON g.central_id::INTEGER = o.car_id
WHERE 
    g.archived = FALSE  -- Only include non-archived repositories
    AND g.pushed_at >= CURRENT_DATE - INTERVAL '5 months'  -- Only repositories pushed in the last 5 months
GROUP BY 
    o.vp1_name
ORDER BY 
    active_repo_count DESC;
```

## SQL Query: Active Repository Names and Count Grouped by VP1


```sql
WITH RepoCounts AS (
    SELECT 
        o.vp1_name, 
        COUNT(DISTINCT g.name) AS repo_count
    FROM 
        public.sonar_qube_integration_github_metadata g
    JOIN 
        public.sonarqube_integration_carid_app_owners o
        ON g.central_id::INTEGER = o.car_id
    WHERE 
        g.archived = FALSE  -- Only include non-archived repositories
        AND g.pushed_at >= CURRENT_DATE - INTERVAL '5 months'  -- Only repositories pushed in the last 5 months
    GROUP BY 
        o.vp1_name
)
SELECT 
    o.vp1_name, 
    g.name AS repo_name, 
    rc.repo_count
FROM 
    public.sonar_qube_integration_github_metadata g
JOIN 
    public.sonarqube_integration_carid_app_owners o
    ON g.central_id::INTEGER = o.car_id
JOIN 
    RepoCounts rc
    ON o.vp1_name = rc.vp1_name
WHERE 
    g.archived = FALSE  -- Only include non-archived repositories
    AND g.pushed_at >= CURRENT_DATE - INTERVAL '5 months'  -- Only repositories pushed in the last 5 months
ORDER BY 
    o.vp1_name, g.name;
```

WITH RepoCounts AS (...):
- This Common Table Expression (CTE) calculates the count of active repositories grouped by VP1.
- COUNT(DISTINCT g.name): Counts the distinct repository names for each VP1.
- JOIN: Joins the GitHub metadata table (sonar_qube_integration_github_metadata) with the owners table (sonarqube_integration_carid_app_owners) based on central_id = car_id.
- rc.repo_count: This retrieves the total repository count for each VP1.
WHERE:
Filters for repositories that are not archived (g.archived = FALSE).
Filters for repositories that were pushed in the last 5 months.
ORDER BY o.vp1_name, g.name: Orders the results by VP1 name and then by repository name.


## Active Repositories with Owner Info, Grouped by VP1

```sql
WITH RepoCounts AS (
    SELECT 
        o.vp1_name, 
        COUNT(DISTINCT g.name) AS repo_count
    FROM 
        public.sonar_qube_integration_github_metadata g
    JOIN 
        public.sonarqube_integration_carid_app_owners o
        ON g.central_id::INTEGER = o.car_id
    WHERE 
        g.archived = FALSE  -- Only include non-archived repositories
        AND g.pushed_at >= CURRENT_DATE - INTERVAL '5 months'  -- Only repositories pushed in the last 5 months
    GROUP BY 
        o.vp1_name
)
SELECT 
    o.vp1_name, 
    g.name AS repo_name, 
    rc.repo_count, 
    o.owner_name, 
    o.owner_email
FROM 
    public.sonar_qube_integration_github_metadata g
JOIN 
    public.sonarqube_integration_carid_app_owners o
    ON g.central_id::INTEGER = o.car_id
JOIN 
    RepoCounts rc
    ON o.vp1_name = rc.vp1_name
WHERE 
    g.archived = FALSE  -- Only include non-archived repositories
    AND g.pushed_at >= CURRENT_DATE - INTERVAL '5 months'  -- Only repositories pushed in the last 5 months
ORDER BY 
    o.vp1_name, g.name;

```
- WITH RepoCounts AS (...):
- Calculates the count of active repositories grouped by VP1.
- COUNT(DISTINCT g.name): Counts distinct repository names.
- New Columns:
- o.owner_name: The owner's name is pulled from the sonarqube_integration_carid_app_owners table.
- o.owner_email: The owner's email is also pulled from the sonarqube_integration_carid_app_owners table.
JOIN:
Joins the GitHub metadata table and the owners table on central_id = car_id.
Joins the RepoCounts CTE to add the count of active repositories.
ORDER BY o.vp1_name, g.name: Orders the results by VP1 name and repository name.


##  Active Repositories Onboarded to SQ, with Owner Info and Grouped by VP1

WITH RepoCounts AS (
    SELECT 
        o.vp1_name, 
        COUNT(DISTINCT g.name) AS repo_count
    FROM 
        public.sonar_qube_integration_github_metadata g
    JOIN 
        public.sonarqube_integration_carid_app_owners o
        ON g.central_id::INTEGER = o.car_id
    JOIN 
        public.sonarqube_integration_baseline_poa p
        ON g.central_id = p.central_id  -- Ensure repo is onboarded to SonarQube (baseline table)
    WHERE 
        g.archived = FALSE  -- Only include non-archived repositories
        AND g.pushed_at >= CURRENT_DATE - INTERVAL '5 months'  -- Only repositories pushed in the last 5 months
    GROUP BY 
        o.vp1_name
)
SELECT 
    o.vp1_name, 
    g.name AS repo_name, 
    rc.repo_count, 
    o.owner_name, 
    o.owner_email
FROM 
    public.sonar_qube_integration_github_metadata g
JOIN 
    public.sonarqube_integration_carid_app_owners o
    ON g.central_id::INTEGER = o.car_id
JOIN 
    public.sonarqube_integration_baseline_poa p
    ON g.central_id = p.central_id  -- Ensure repo is onboarded to SonarQube (baseline table)
JOIN 
    RepoCounts rc
    ON o.vp1_name = rc.vp1_name
WHERE 
    g.archived = FALSE  -- Only include non-archived repositories
    AND g.pushed_at >= CURRENT_DATE - INTERVAL '5 months'  -- Only repositories pushed in the last 5 months
ORDER BY 
    o.vp1_name, g.name;

-----------------------

WITH RepoCounts AS (
    SELECT 
        o.vp1_name, 
        COUNT(DISTINCT g.name) AS repo_count
    FROM 
        public.sonar_qube_integration_github_metadata g
    JOIN 
        public.sonarqube_integration_carid_app_owners o
        ON g.central_id::INTEGER = o.car_id
    JOIN 
        public.sonarqube_integration_baseline_poa p
        ON g.central_id::INTEGER = p.central_id::INTEGER  -- Ensure both central_id are cast to INTEGER
    WHERE 
        g.archived = FALSE  -- Only include non-archived repositories
        AND g.pushed_at >= CURRENT_DATE - INTERVAL '5 months'  -- Only repositories pushed in the last 5 months
    GROUP BY 
        o.vp1_name
)
SELECT 
    o.vp1_name, 
    g.name AS repo_name, 
    rc.repo_count, 
    o.owner_name, 
    o.owner_email
FROM 
    public.sonar_qube_integration_github_metadata g
JOIN 
    public.sonarqube_integration_carid_app_owners o
    ON g.central_id::INTEGER = o.car_id
JOIN 
    public.sonarqube_integration_baseline_poa p
    ON g.central_id::INTEGER = p.central_id::INTEGER  -- Ensure both central_id are cast to INTEGER
JOIN 
    RepoCounts rc
    ON o.vp1_name = rc.vp1_name
WHERE 
    g.archived = FALSE  -- Only include non-archived repositories
    AND g.pushed_at >= CURRENT_DATE - INTERVAL '5 months'  -- Only repositories pushed in the last 5 months
ORDER BY 
    o.vp1_name, g.name;


