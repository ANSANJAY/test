#!/bin/bash

# Check if the input CSV is provided as an argument
if [ $# -ne 1 ]; then
  echo "Usage: $0 <input_csv>"
  exit 1
fi

input_csv="$1"
output_csv="output.csv"

# Initialize the output CSV with header
echo "repo_name,id_or_error" > "$output_csv"

# Read the input CSV line by line, skipping spaces
while IFS=, read -r repo_name _; do
  # Remove leading/trailing spaces from repo_name
  repo_name=$(echo "$repo_name" | xargs)

  # Skip empty repo names (if any)
  if [ -z "$repo_name" ]; then
    continue
  fi

  # Make the API call and decode the base64 response
  response=$(gh api "repos/amex-eng/${repo_name}/contents/.amex/buildblocks.yaml" --jq .content 2>&1)

  if [[ $? -eq 0 ]]; then
    # Decode the base64 content and extract the 'id' field using jq
    id=$(echo "$response" | base64 -d | jq -r '.central.id')

    # Check if 'id' was extracted successfully
    if [[ -n "$id" && "$id" != "null" ]]; then
      echo "${repo_name},${id}" >> "$output_csv"
    else
      echo "${repo_name},Error: 'id' not found" >> "$output_csv"
    fi
  else
    # Capture the error response and write it to the output CSV
    echo "${repo_name},Error: ${response}" >> "$output_csv"
  fi
done < <(tail -n +2 "$input_csv")  # Skip the header row of input CSV

echo "Script completed. Output saved to $output_csv."
