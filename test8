#!/bin/bash

input_file="input.csv"    # Replace with your input CSV
output_file="output_results.csv"  # Output CSV with 'central_id' or error message

# Write the header to the output CSV
echo "project_link,central_id_or_error" > "$output_file"

# Loop through the CSV file, skipping the header
tail -n +2 "$input_file" | while IFS=, read -r project_link; do
    # Trim any leading or trailing spaces and remove carriage returns
    project_link=$(echo "$project_link" | tr -d '\r' | xargs)

    # Extract the repository path from the project link (e.g., org/repo/path)
    repo_path=$(echo "$project_link" | awk -F'/repos/' '{print $2}')

    # Log the current processing repository
    echo "Processing repository: $repo_path"

    # Call the GitHub API and capture the response or error
    api_response=$(gh api "repos/$repo_path/contents/.amex/buildblocks.yaml" 2>&1)

    # Check if the API call returned a valid content field
    if echo "$api_response" | jq -e .content >/dev/null 2>&1; then
        # Decode the content and extract the 'id'
        content=$(echo "$api_response" | jq -r .content | base64 -d)
        central_id=$(echo "$content" | awk -F"'" '/id:/ {print $2}')

        if [[ -z "$central_id" ]]; then
            echo "$project_link,ERROR: 'id' not found" >> "$output_file"
        else
            echo "$project_link,$central_id" >> "$output_file"
        fi
    else
        # Extract and log the error message if present
        error_message=$(echo "$api_response" | jq -r .message 2>/dev/null || echo "Unknown Error")
        echo "$project_link,ERROR: $error_message" >> "$output_file"
    fi

    echo "---------------------------------------------------"
done

echo "Script execution completed. Check the $output_file file for results."
