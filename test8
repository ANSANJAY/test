#!/bin/bash

# Input and output file paths
INPUT_CSV="input.csv"
OUTPUT_CSV="output.csv"

# Function to trim spaces and remove carriage returns
trim() {
    echo "$1" | sed 's/^[ \t\r\n]*//;s/[ \t\r\n]*$//'
}

# Ensure output CSV has a header
echo "repo_name,id_or_error" > "$OUTPUT_CSV"

# Loop through each line of the input CSV (excluding the header)
tail -n +2 "$INPUT_CSV" | while IFS=, read -r repo_name; do
    # Trim the repo name to avoid issues with spaces or carriage returns
    repo_name=$(trim "$repo_name")

    echo "Processing repo: $repo_name"

    # Make the API call and capture the response and status code
    response=$(gh api "repos/amex-eng/$repo_name/contents/.amex/buildblocks.yaml" 2>&1)
    status=$?

    if [[ $status -eq 0 ]]; then
        # If the API call was successful, extract and decode the content
        content=$(echo "$response" | jq -r .content | base64 -d 2>/dev/null)
        
        if [[ $? -eq 0 ]]; then
            # Extract the id from the YAML content
            id=$(echo "$content" | grep -oP 'id:\s*'\''\K[0-9]+')

            if [[ -n $id ]]; then
                # Write the repo name and id to the output CSV
                echo "$repo_name,$id" >> "$OUTPUT_CSV"
            else
                # If id is not found, write an error message
                echo "$repo_name,Error: 'id' not found in YAML" >> "$OUTPUT_CSV"
            fi
        else
            # If base64 decoding failed, log an error
            echo "$repo_name,Error: Failed to decode content" >> "$OUTPUT_CSV"
        fi
    else
        # If the API call failed, log the error message
        echo "$repo_name,Error: $response" >> "$OUTPUT_CSV"
    fi
done

echo "Processing completed. Check $OUTPUT_CSV for results."
