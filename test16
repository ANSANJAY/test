Step 1: Create a Copy of the tested_repo Table
sql
Copy code
CREATE TABLE public.sonarqube_integration_tested_repo_copy AS
SELECT * 
FROM public.sonarqube_integration_tested_repo;
This query creates a new table, sonarqube_integration_tested_repo_copy, with the same structure and data as the original table.

Step 2: Add New Columns to Track Testing Progress
Weâ€™ll add columns to track the batch number, status, and testing timestamp.

sql
Copy code
ALTER TABLE public.sonarqube_integration_tested_repo_copy
ADD COLUMN testing_status VARCHAR(50) DEFAULT 'pending',
ADD COLUMN batch_number INTEGER,
ADD COLUMN tested_at TIMESTAMP;


Step 3: Assign Batch 1 (50 XYZ + 50 Non-XYZ)
Here, we assign 50 entries where svp_name = 'xyz' and 50 entries where svp_name != 'xyz' to Batch 1.

Query for 50 XYZ Entries (Batch 1):
sql
Copy code
UPDATE public.sonarqube_integration_tested_repo_copy
SET batch_number = 1, testing_status = 'in-progress'
WHERE batch_number IS NULL
  AND svp_name = 'xyz'
  AND archived = false
  AND has_buildblocks_yaml = true
  AND central_id IS NOT NULL
  AND name NOT IN (
      SELECT repo_name FROM public.sonarqube_integration_baseline_poa
  )
ORDER BY pushed_at DESC
LIMIT 50;
Query for 50 Non-XYZ Entries (Batch 1):
sql
Copy code
UPDATE public.sonarqube_integration_tested_repo_copy
SET batch_number = 1, testing_status = 'in-progress'
WHERE batch_number IS NULL
  AND svp_name != 'xyz'
  AND archived = false
  AND has_buildblocks_yaml = true
  AND central_id IS NOT NULL
  AND name NOT IN (
      SELECT repo_name FROM public.sonarqube_integration_baseline_poa
  )
ORDER BY pushed_at DESC
LIMIT 50;
Step 4: Verify Batch 1 Entries
Use this query to ensure the entries for Batch 1 are correctly assigned:

sql
Copy code
SELECT *
FROM public.sonarqube_integration_tested_repo_copy
WHERE batch_number = 1;
Step 5: Assign Batch 2 (Next 50 + 50 Entries)
Once Batch 1 is assigned, you can proceed to Batch 2.

Query for the Next 50 XYZ Entries (Batch 2):
sql
Copy code
UPDATE public.sonarqube_integration_tested_repo_copy
SET batch_number = 2, testing_status = 'in-progress'
WHERE batch_number IS NULL
  AND svp_name = 'xyz'
  AND archived = false
  AND has_buildblocks_yaml = true
  AND central_id IS NOT NULL
  AND name NOT IN (
      SELECT repo_name FROM public.sonarqube_integration_baseline_poa
  )
ORDER BY pushed_at DESC
LIMIT 50;
Query for the Next 50 Non-XYZ Entries (Batch 2):
sql
Copy code
UPDATE public.sonarqube_integration_tested_repo_copy
SET batch_number = 2, testing_status = 'in-progress'
WHERE batch_number IS NULL
  AND svp_name != 'xyz'
  AND archived = false
  AND has_buildblocks_yaml = true
  AND central_id IS NOT NULL
  AND name NOT IN (
      SELECT repo_name FROM public.sonarqube_integration_baseline_poa
  )
ORDER BY pushed_at DESC
LIMIT 50;
Step 6: Monitor Batch Progress
You can track the progress of each batch with this query:

sql
Copy code
SELECT batch_number, testing_status, COUNT(*)
FROM public.sonarqube_integration_tested_repo_copy
GROUP BY batch_number, testing_status
ORDER BY batch_number;
Step 7: Mark a Batch as Completed
Once testing for a batch is complete, you can mark it as completed:

sql
Copy code
UPDATE public.sonarqube_integration_tested_repo_copy
SET testing_status = 'completed', tested_at = NOW()
WHERE batch_number = 1;
How This Works:
Batch 1: 50 entries with svp_name = 'xyz' + 50 entries with svp_name != 'xyz'.
Batch 2: The next 50 XYZ entries + the next 50 non-XYZ entries.
You proceed batch by batch, ensuring each batch has 50 entries from XYZ and 50 from non-XYZ.
